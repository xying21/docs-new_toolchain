"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7253],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=s(r),k=o,d=h["".concat(c,".").concat(k)]||h[k]||u[k]||a;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function k(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},3711:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>l,contentTitle:()=>c,metadata:()=>s,toc:()=>p,default:()=>h});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],l={id:"pw-lock",title:"PW-lock"},c=void 0,s={unversionedId:"develop/tools/pw-lock",id:"develop/tools/pw-lock",title:"PW-lock",description:"Overview",source:"@site/docs/develop/tools/pw-lock.md",sourceDirName:"develop/tools",slug:"/develop/tools/pw-lock",permalink:"/docs-new_toolchain/docs/develop/tools/pw-lock",tags:[],version:"current",frontMatter:{id:"pw-lock",title:"PW-lock"},sidebar:"Develop",previous:{title:"CKB Studio",permalink:"/docs-new_toolchain/docs/develop/tools/ckb-studio"},next:{title:"DApps on CKB Workshop Code",permalink:"/docs-new_toolchain/docs/develop/tutorials/integratenft"}},p=[{value:"Overview",id:"overview",children:[],level:2},{value:"Quick Start",id:"quick-start",children:[],level:2},{value:"PW-lock Basic Structure",id:"pw-lock-basic-structure",children:[],level:2},{value:"Offchain",id:"offchain",children:[],level:2},{value:"Features In Development",id:"features-in-development",children:[],level:2},{value:"Reference",id:"reference",children:[],level:2}],u={toc:p};function h(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/lay2dev/pw-lock"},"PW-lock"),", developed by the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lay2dev/pw-lock"},"lay2")," Team, is a lock script which can make use of other blockchain wallets as CKB wallets. PW-lock is based on the concept of implementing the signature verification algorithms of other chains (e.g. ETH/TRON/EOS/BTC) so as to reuse others' facilities. Also, PW-lock is a lock with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-production-scripts/blob/master/c/anyone_can_pay.c"},"ACP")," logic."),(0,a.kt)("p",null,"Current PW-lock supports the Ethereum ",(0,a.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-191"},"EIP-191")," signature verification standard. It is possible to communicate with MetaMask, an Ethereum wallet, through the RPC ",(0,a.kt)("a",{parentName:"p",href:"https://docs.metamask.io/guide/signing-data.html#signing-data-with-metamask"},"personal_sign"),", and sign the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-system-scripts/wiki/How-to-sign-transaction#p2pkh"},"hash_all")," message, then verify the transaction in the PW-lock script before unlocking."),(0,a.kt)("h2",{id:"quick-start"},"Quick Start"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"https://github.com/lay2dev/pw-lock.git\ncd pw-lock\ngit submodule init\ngit submodule update\nmake install-tools\nmake all-via-docker\ncargo test --all\n")),(0,a.kt)("h2",{id:"pw-lock-basic-structure"},"PW-lock Basic Structure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"- pw-lock-script:\n  - code_hash: 32 bytes - pw-lock script code hash\n  - hash_type: 1 byte - pw-lock script hash_type\n  - args: 20 bytes - public key hash. e.g. ETH address\n  - witness(current version):\n    - lock: 65 bytes - secp256k1 signature_data\n")),(0,a.kt)("h2",{id:"offchain"},"Offchain"),(0,a.kt)("p",null,"The lay2 team has developed the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lay2dev/pw-core"},"PW-core"),", a front-end JS SDK based on Typescript, to interwork with PW-lock. Some additional supports may be required if working in a non-JavaScript environment. "),(0,a.kt)("p",null,"In addition to the ACP unlock method, PW-lock also supports the similar unlock of the CKB secp256k1 lock ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-system-scripts/wiki/How-to-sign-transaction#p2pkh"},"P2PKH")," signature verification. The difference is that the current version of pw-lock uses a slightly different hash algorithm to that of secp256k1_blake160."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"// pw-lock\nKeccak(Blake2b(Tx) | witness)\n\n// secp256k1-lock\nBlake2b(Blake2b(Tx) | witness)\n")),(0,a.kt)("h2",{id:"features-in-development"},"Features In Development"),(0,a.kt)("p",null,"Add support for chains other than ETH, such as ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/XuJiandong/pw-lock/blob/develop/c/pw_lock.h#L197-L230"},"EOS, TRON, BITCOIN, DOGECOIN"),", etc. in the upcoming pw-lock."),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/lay2dev/pw-lock"},"PW-lock")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/XuJiandong/pw-lock"},"Repository Reviewed & Enhanced Contract")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/lay2dev/pw-core/blob/master/src/constants.ts#L71-L84"},"Deployment Information On Lina, the mainnet")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/lay2dev/pw-core/blob/master/src/constants.ts#L157-L169"},"Deployment Information On Aggron, the testnet")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/lay2dev/pw-core/blob/master/src/signers/signer.ts"},"Available Codes for Signature"))))}h.isMDXComponent=!0}}]);