"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7635],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),i=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=i(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var i=2;i<o;i++)s[i]=n[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7619:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>u,metadata:()=>p,toc:()=>d,default:()=>h});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s=n(4996),l=n(9960),c=["components"],i={id:"manageaccounts",title:"Manage Accounts"},u=void 0,p={unversionedId:"develop/tools/lumos/guides/manageaccounts",id:"develop/tools/lumos/guides/manageaccounts",title:"Manage Accounts",description:"Lumos also provides the functions to manage the keys, addresses and the lock script of a CKB Account.",source:"@site/docs/develop/tools/lumos/guides/manageAccounts.md",sourceDirName:"develop/tools/lumos/guides",slug:"/develop/tools/lumos/guides/manageaccounts",permalink:"/develop/docs/develop/tools/lumos/guides/manageaccounts",tags:[],version:"current",frontMatter:{id:"manageaccounts",title:"Manage Accounts"},sidebar:"Develop",previous:{title:"Build Transactions",permalink:"/develop/docs/develop/tools/lumos/guides/buildtransactions"},next:{title:"Introduction",permalink:"/develop/docs/develop/tools/sdk/intro"}},d=[{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Environment",id:"environment",children:[],level:2},{value:"Examples",id:"examples",children:[{value:"Generate Extended Keys",id:"generate-extended-keys",children:[],level:3},{value:"Generate the Public Key from a Private Key",id:"generate-the-public-key-from-a-private-key",children:[],level:3},{value:"Generate Args from a Public Key",id:"generate-args-from-a-public-key",children:[],level:3},{value:"Recover the Public Key from a Signature and a Signed Message",id:"recover-the-public-key-from-a-signature-and-a-signed-message",children:[],level:3},{value:"Generate a Keystore File",id:"generate-a-keystore-file",children:[],level:3},{value:"Generate an XPub Key File from an Extended Private Key",id:"generate-an-xpub-key-file-from-an-extended-private-key",children:[],level:3},{value:"Get the Balance of an HD Wallet by Using the HD Cache Manager",id:"get-the-balance-of-an-hd-wallet-by-using-the-hd-cache-manager",children:[],level:3},{value:"Generate the Address from a Lock Script",id:"generate-the-address-from-a-lock-script",children:[],level:3},{value:"Get the Lock Script from an Address",id:"get-the-lock-script-from-an-address",children:[],level:3},{value:"Generate the Lock Hash from a Lock Script",id:"generate-the-lock-hash-from-a-lock-script",children:[],level:3},{value:"Generate an Account from a Private Key",id:"generate-an-account-from-a-private-key",children:[],level:3}],level:2}],m={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Lumos also provides the functions to manage the keys, addresses and the lock script of a ",(0,o.kt)(l.Z,{to:(0,s.Z)("/docs/tools/lumos/preparation/createaccount#ckb-account"),mdxType:"Link"},"CKB Account"),"."),(0,o.kt)("p",null,"The following figure shows the Lumos functions for the conversion between private key, public key, Lock Script, and CKB address."),(0,o.kt)("img",{src:(0,s.Z)("img/conversion.png")}),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"The following prerequisites apply for the examples in this guide:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The development environment is set up. For more information, see ",(0,o.kt)(l.Z,{to:(0,s.Z)("/docs/tools/lumos/preparation/setupsystem"),mdxType:"Link"},"Set Up the Development Environment"),"."),(0,o.kt)("li",{parentName:"ul"},"The Lumos packages are installed. For more information, see ",(0,o.kt)(l.Z,{to:(0,s.Z)("/docs/tools/lumos/guides/installlumos"),mdxType:"Link"},"Install Lumos Packages"),".")),(0,o.kt)("h2",{id:"environment"},"Environment"),(0,o.kt)("p",null,"The following examples are verified on Ubuntu 20.04.2. Steps on the other platforms can be adjusted accordingly."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"generate-extended-keys"},"Generate Extended Keys"),(0,o.kt)("p",null,"The HD wallet manager (",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/hd"),") provides the following functions for generating extended keys based on ",(0,o.kt)("a",{parentName:"p",href:"https://en.bitcoin.it/wiki/BIP_0039"},"BIP-39"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://nervosnetwork.github.io/lumos/modules/hd.html#generatemnemonic-3"},"mnemonic.generateMnemonic"),": Generates mnemonic words (12 words)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://nervosnetwork.github.io/lumos/modules/hd.html#mnemonictoseed-3"},"mnemonic.mnemonicToSeedSync"),": Generates a seed from mnemonic words."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://nervosnetwork.github.io/lumos/classes/hd.extendedprivatekey-1.html#fromseed"},"ExtendedPrivateKey.fromSeed"),": Generates an extended private key (a private key and a chain code) from a seed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://nervosnetwork.github.io/lumos/classes/hd.extendedprivatekey-1.html#toextendedpublickey"},"ExtendedPrivateKey.toExtendedPublicKey"),": Generates an extended public key (a public key and a chain code) from an extended private key.")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateKeys" {4,6,7,10}',title:'"hellolumos/src/manageaccounts.ts/generateKeys"',"{4,6,7,10}":!0},'import { mnemonic, ExtendedPrivateKey } from "@ckb-lumos/hd";\n\nexport async function generateKeys() {\n  const m = mnemonic.generateMnemonic();\n  console.log("The mnemonic is", m);\n  const seed = mnemonic.mnemonicToSeedSync(m);\n  const extendedPrivateKey = ExtendedPrivateKey.fromSeed(seed);\n  console.log("The extended private key is",extendedPrivateKey);\n\n  const publicKey = extendedPrivateKey.toExtendedPublicKey().publicKey;\n  console.log("The public key is", publicKey);\n}\n')),(0,o.kt)("p",null,"Try the ",(0,o.kt)("inlineCode",{parentName:"p"},"generateKeys")," function in the Node.js REPL mode:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"CLICK ME"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7}","{1,2,5,7}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { manageaccounts } = require(\".\");\nThe server is started.\n> await manageaccounts.generateKeys();\nThe mnemonic is put sweet bomb route thrive version evoke about excite pumpkin voyage tragic\nThe extended private key is\nExtendedPrivateKey {\n  privateKey: '0xb0551ab24a366ae15fe8cbf450d275ed5c5dd72f2a8de0fbc74072230c05aa6c',\n  chainCode: '0x821f8011f21b00a82c832f1208367e31456bc81a7c1909e01d337a240bd629ed'\n}\nThe public key is 0x022186277d6626f615ec926d1a5c79ba7d6dd459e27597b68c4797e45336a2ba20\n")))),(0,o.kt)("h3",{id:"generate-the-public-key-from-a-private-key"},"Generate the Public Key from a Private Key"),(0,o.kt)("p",null,"The key module of the ",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/hd")," package supports producing a public key from a private key based on the ",(0,o.kt)("a",{parentName:"p",href:"https://en.bitcoin.it/wiki/Secp256k1"},"secp256k1")," standard."),(0,o.kt)("p",null,"The following example uses the ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/hd.html#privatetopublic-3"},"key.privateToPublic")," function to generate a public key from a private key."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/private2Public" {7}',title:'"hellolumos/src/manageaccounts.ts/private2Public"',"{7}":!0},'import { HexString } from "@ckb-lumos/base";\nimport { key } from "@ckb-lumos/hd";\n\nexport async function private2Public(\n  privatekey: HexString\n): Promise<HexString> {\n  const publicKey = key.privateToPublic(privatekey);\n\n  console.log("The public key is", publicKey);\n  return publicKey;\n}\n')),(0,o.kt)("p",null,"Try the ",(0,o.kt)("inlineCode",{parentName:"p"},"private2Public")," function in the Node.js REPL mode:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"CLICK ME"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7}","{1,2,5,7}":!0},'$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { manageaccounts } = require(".");\nThe server is started.\n> await manageaccounts.private2Public("0xb0551ab24a366ae15fe8cbf450d275ed5c5dd72f2a8de0fbc74072230c05aa6c");\nThe public key is 0x022186277d6626f615ec926d1a5c79ba7d6dd459e27597b68c4797e45336a2ba20\n\'0x022186277d6626f615ec926d1a5c79ba7d6dd459e27597b68c4797e45336a2ba20\'\n')))),(0,o.kt)("h3",{id:"generate-args-from-a-public-key"},"Generate Args from a Public Key"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/hd.html#publickeytoblake160-3"},"key.publicKeyToBlake160")," function uses blake160 that extracts the first 20 bytes of a public key hash to generate the lock args."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/public2Args" {5}',title:'"hellolumos/src/manageaccounts.ts/public2Args"',"{5}":!0},'import { HexString } from "@ckb-lumos/base";\nimport { key } from "@ckb-lumos/hd";\n\nexport async function public2Args(publicKey: HexString): Promise<string> {\n  const lockArgs = key.publicKeyToBlake160(publicKey);\n\n  console.log("The lock args is", lockArgs);\n  return lockArgs;\n}\n')),(0,o.kt)("p",null,"Try the ",(0,o.kt)("inlineCode",{parentName:"p"},"public2Args")," function in the Node.js REPL mode:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"CLICK ME"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7}","{1,2,5,7}":!0},'$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { manageaccounts } = require(".");\nThe server is started.\n> await manageaccounts.public2Args("0x022186277d6626f615ec926d1a5c79ba7d6dd459e27597b68c4797e45336a2ba20");\nThe lock args is 0x00972f0606323b8680b6bc30b3dc7e4fcc808318\n\'0x00972f0606323b8680b6bc30b3dc7e4fcc808318\'\n')))),(0,o.kt)("h3",{id:"recover-the-public-key-from-a-signature-and-a-signed-message"},"Recover the Public Key from a Signature and a Signed Message"),(0,o.kt)("p",null,"Signatures are based on elliptic curve private/public key pairs. The public key is recoverable from the signature. "),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/hd.html#recoverfromsignature-3"},"key.recoverFromSignature")," function can recover the public key from a signature and a signed message."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/recoverFromSignature" {8}',title:'"hellolumos/src/manageaccounts.ts/recoverFromSignature"',"{8}":!0},'import { HexString } from "@ckb-lumos/base";\nimport { key } from "@ckb-lumos/hd";\n\nexport async function recoverFromSignature(\n  message: HexString,\n  signature: HexString\n): Promise<HexString> {\n  const publicKey = key.recoverFromSignature(message, signature);\n\n  console.log("The public key is", publicKey);\n  return publicKey;\n}\n')),(0,o.kt)("p",null,"Try the ",(0,o.kt)("inlineCode",{parentName:"p"},"recoverFromSignature")," function in the Node.js REPL mode:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"CLICK ME"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-9}","{1,2,5,7-9}":!0},'$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { manageaccounts } = require(".");\nThe server is started.\n> const message = "0x2e6c43f23bd5b6a658de09e75efdaadde7f7e2a9581fca240a46a75e7fefb21a";\n> const signature = "0xb1518236147cbfbbcb80d6e6c6ed9b87652510786f0bdbff3a0202788c871e8801a2c7c10fa23d61fbb88f91f1fed02f68c28aa432ee22759c36171f67134d0c01";\n> await manageaccounts.recoverFromSignature(message, signature);\nThe public key is 0x02963f88be6c4163a68abf0539facdfc2a77064c6091f618953a230caeacf5237e\n')))),(0,o.kt)("h3",{id:"generate-a-keystore-file"},"Generate a Keystore File"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"A keystore file provides storage for keys. The ckb-cli tool or wallets like the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.nervos.org/docs/basics/guides/neuron#3-create-a-new-wallet-or-import-existing-keystore-file-or-seed-phrase-to-the-neuron-wallet"},"Neuron Wallet")," can import keystore files to recover the wallets.")),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/hd.keystore-1.html"},"Keystore")," module of the ",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/hd")," package supports to generate keystore files from a private key and a password that encrypts the keystore file. "),(0,o.kt)("p",null,"The following example generates a keystore with an extended private key by using the ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/hd.keystore-1.html#create"},"Keystore.create")," function, and then saves the keystore file by using the ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/hd.keystore-1.html#save"},"Keystore.save")," function. The default name for the keystore file is ",(0,o.kt)("inlineCode",{parentName:"p"},"${id}.json"),"."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateKeystore" {14,15}',title:'"hellolumos/src/manageaccounts.ts/generateKeystore"',"{14,15}":!0},'import { Keystore } from "@ckb-lumos/hd";\n\nexport async function generateKeystore(\n  password: string,\n  path: string,\n  name: string,\n  overwrite: boolean | undefined\n) {\n  const m = mnemonic.generateMnemonic();\n  console.log("The mnemonic is", m);\n  const seed = mnemonic.mnemonicToSeedSync(m);\n  const extendedPrivateKey = ExtendedPrivateKey.fromSeed(seed);\n  console.log("The extendedPrivateKey is", extendedPrivateKey);\n  const keystore = Keystore.create(extendedPrivateKey, password);\n  keystore.save(path, { name, overwrite });\n}\n')),(0,o.kt)("p",null,"Try the ",(0,o.kt)("inlineCode",{parentName:"p"},"generateKeystore")," function in the Node.js REPL mode:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"CLICK ME"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7}","{1,2,5,7}":!0},'$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { manageaccounts } = require(".");\nThe server is started.\n> await manageaccounts.generateKeystore("test","/users/username","keystore.json",true);\nThe mnemonic is catalog hero they audit liquid struggle topic enter cotton expire sugar cause\nThe extendedPrivateKey is ExtendedPrivateKey {\n  privateKey: \'0x641e26e91e605740b62aa678816af5b82591e977648a90f8d556f4e39962178c\',\n  chainCode: \'0x25a4c28fcdf5a74789536e5f368f931436ee70e38537e7e305db4bd497b732e8\'\n}\n')))),(0,o.kt)("h3",{id:"generate-an-xpub-key-file-from-an-extended-private-key"},"Generate an XPub Key File from an Extended Private Key"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"An xPub Key (extended public key) is a public key and chain code, which can be used to create child public keys.")),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/hd.xpubstore-1.html"},"XPubStore")," class of the ",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/hd")," package supports to generate xPub key files from extended private keys."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateXpubStore" {9,10}',title:'"hellolumos/src/manageaccounts.ts/generateXpubStore"',"{9,10}":!0},'import { ExtendedPrivateKey, XPubStore } from "@ckb-lumos/hd";\n\nexport async function generateXPubStore(\n  extendedPrivateKey: ExtendedPrivateKey,\n  path: string,\n  overwrite: boolean | undefined\n) {\n  const accountExtendedPublicKey = extendedPrivateKey.toAccountExtendedPublicKey();\n  const xpubstore = new XPubStore(accountExtendedPublicKey);\n  xpubstore.save(path, { overwrite });\n}\n')),(0,o.kt)("p",null,"Try the ",(0,o.kt)("inlineCode",{parentName:"p"},"generateXPubStore")," function in the Node.js REPL mode:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"CLICK ME"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-11}","{1,2,5,7-11}":!0},'$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { manageaccounts } = require(".");\nThe server is started.\n> const {ExtendedPrivateKey}=require("@ckb-lumos/hd");\n> const privateKey="0x5503cc1d40b9e05a46fe8e1d4702786c624a1b5e774f964db6746ea754b4843a";\n> const chainCode = "0x568e6eba7d3be6edf051d5de2e0384637c82f1a2e5bab56f5431b2978bd73a27";\n> const extendedPrivateKey = new ExtendedPrivateKey(privateKey,chainCode);\n> await manageaccounts.generateXPubStore(extendedPK,"/user/username",true);\n')),(0,o.kt)("p",null,"The example generates an xpub file under the ",(0,o.kt)("var",null,"/user/username")," directory. The content of the generated file is: ",(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},'{"xpubkey":"027f5e9f79ff3739990a0a4581304d3128cbe0f22ee6274c6601defc87c04986cbcd1efd7be4123e6cd9d15a434407661b30b570ef0b9d444553cfec4527ec8ee3"}'),".")))),(0,o.kt)("h3",{id:"get-the-balance-of-an-hd-wallet-by-using-the-hd-cache-manager"},"Get the Balance of an HD Wallet by Using the HD Cache Manager"),(0,o.kt)("p",null,"A DApp can serve queries on HD wallets in an efficient way by using the HD cache manager (",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/hd-cache"),") component that can store the following data of an HD wallet:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The master public key"),(0,o.kt)("li",{parentName:"ul"},"The next receiving public key"),(0,o.kt)("li",{parentName:"ul"},"The next change public key"),(0,o.kt)("li",{parentName:"ul"},"30  receiving keys"),(0,o.kt)("li",{parentName:"ul"},"20 change keys"),(0,o.kt)("li",{parentName:"ul"},"The balance of the HD wallet")),(0,o.kt)("p",null,"The HD cache manager can load the data of HD wallets from mnemonic words with the ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/hd_cache.cachemanager-1.html#frommnemonic"},"CacheManager.fromMnemonic")," function or from a keystore file with the ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/classes/hd_cache.cachemanager-1.html#loadfromkeystore"},"CacheManager.loadFromKeystore")," function."),(0,o.kt)("p",null,"If the keystore file is generated by the ckb-cli tool (the keystore file contains ",(0,o.kt)("inlineCode",{parentName:"p"},'"origin":"ckb-cli"'),"), or the ",(0,o.kt)("var",null,"needMasterPublicKey")," variable is set as ",(0,o.kt)("var",null,"true"),", the HD cache manager loads the data for all keys including the master public key."),(0,o.kt)("p",null,"The following example loads the data from a keystore file of an HD wallet, and then uses the ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/hd_cache.html#getbalance-1"},"getBalance")," function to get the balance of the HD wallet. "),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/mydapp/src/manageaccounts.ts/getBalancebyHDCache" {23}',title:'"/mydapp/src/manageaccounts.ts/getBalancebyHDCache"',"{23}":!0},'import {\n  CacheManager,\n  CellCollector,\n  getBalance,\n  getDefaultInfos,\n} from "@ckb-lumos/hd-cache";\n\nexport async function getBalancebyHDCache(\n  path: string,\n  password: string,\n  needMasterPublicKey: boolean\n) {\n  const cacheManager = CacheManager.loadFromKeystore(\n    INDEXER,\n    path,\n    password,\n    getDefaultInfos(),\n    { needMasterPublicKey }\n  );\n  cacheManager.startForever();\n  //@ts-ignore\n  await cacheManager.cache.loop();\n  const balance = await getBalance(new CellCollector(cacheManager));\n  console.log("The HD wallet balance is", BigInt(balance));\n}\n')),(0,o.kt)("p",null,"Try the ",(0,o.kt)("inlineCode",{parentName:"p"},"getBalancebyHDCache")," function in the Node.js REPL mode:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"CLICK ME"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,8,11}","{1,2,5,8,11}":!0},'$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { manageaccounts } = require(".");\nThe server is started.\n# Set the needMasterPublicKey variable as false to get the balance for all keys except the master public key\n> await manageaccounts.getBalancebyHDCache("/user/username","test", false);\nThe HD wallet balance is 40000000000n\n# Set the needMasterPublicKey variable as true to get the balance for all keys including the master public key\n> await manageaccounts.getBalancebyHDCache("/user/username","test", true);\nThe HD wallet balance is 2833614223561041n\n')))),(0,o.kt)("h3",{id:"generate-the-address-from-a-lock-script"},"Generate the Address from a Lock Script"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/helpers.html#generateaddress-1"},"generateAddress")," function of the ",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/helpers")," package can be used to generate the address from a specific lock script. "),(0,o.kt)("p",null,"The function generates the address with the ",(0,o.kt)("strong",{parentName:"p"},"ckb")," prefix or the ",(0,o.kt)("strong",{parentName:"p"},"ckt")," prefix, that can be leveraged from ",(0,o.kt)("inlineCode",{parentName:"p"},"config.PREFIX"),"."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateAddressfromLock" {8}',title:'"hellolumos/src/manageaccounts.ts/generateAddressfromLock"',"{8}":!0},'import { Config } from "@ckb-lumos/config-manager";\nimport { generateAddress } from "@ckb-lumos/helpers";\n\nexport async function generateAddressfromLock(\n  lockScript: Script,\n  config: Config\n) {\n  const address = generateAddress(lockScript, { config });\n  console.log("The address for the lockscript is", address);\n}\n')),(0,o.kt)("p",null,"Try the ",(0,o.kt)("inlineCode",{parentName:"p"},"generateAddressfromLock")," function in the Node.js REPL mode:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"CLICK ME"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{1,2,5,7-10}","{1,2,5,7-10}":!0},'$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { accounts, manageaccounts, CONFIG } = require(".");\nThe server is started.\n> const alice = accounts.ALICE;\n> const { parseAddress } = require("@ckb-lumos/helpers");\n> const script = parseAddress(alice.ADDRESS);\n> const address = await manageaccounts.generateAddressfromLock(script,CONFIG);\nThe address for the lockscript is ckt1qyq8uqrxpw9tzg4u5waydrzmdmh8raqt0k8qmuetsf\n')))),(0,o.kt)("h3",{id:"get-the-lock-script-from-an-address"},"Get the Lock Script from an Address"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/helpers.html#parseaddress-1"},"parseAddress")," function of the ",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/helpers")," package can be used to get the lock script from an address."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generatelockFromAddress" {4}',title:'"hellolumos/src/manageaccounts.ts/generatelockFromAddress"',"{4}":!0},'import { parseAddress } from "@ckb-lumos/helpers";\n\nexport async function generateLockFromAddress(address: Address) {\n  const lockScript = parseAddress(address);\n  console.log("The lock script of the address is", lockscript);\n}\n')),(0,o.kt)("p",null,"Try the ",(0,o.kt)("inlineCode",{parentName:"p"},"generatelockFromAddress")," function in the Node.js REPL mode: "),(0,o.kt)("details",null,(0,o.kt)("summary",null,"CLICK ME"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7,8}","{1,2,5,7,8}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, manageaccounts } = require(\".\");\nThe server is started.\n> const alice = accounts.ALICE;\n> await manageaccounts.generateLockFromAddress(alice.ADDRESS);\nThe lock script of the address is {\n  code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n  hash_type: 'type',\n  args: '0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e'\n}\n")))),(0,o.kt)("h3",{id:"generate-the-lock-hash-from-a-lock-script"},"Generate the Lock Hash from a Lock Script"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/base.html#utils"},"computeScriptHash")," function generates the hash value for a specific lock script."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateLockHash" {5}',title:'"hellolumos/src/manageaccounts.ts/generateLockHash"',"{5}":!0},'import { utils } from "@ckb-lumos/base";\nconst { computeScriptHash } = utils;\n\nexport async function generateLockHash(lock: Script) {\n  const lockHash = computeScriptHash(lock);\n  console.log("The lock hash is", lockHash);\n}\n')),(0,o.kt)("p",null,"Try the ",(0,o.kt)("inlineCode",{parentName:"p"},"generateLockHash")," function in the Node.js REPL mode: "),(0,o.kt)("details",null,(0,o.kt)("summary",null,"CLICK ME"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7-10}","{1,2,5,7-10}":!0},'$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType ".help" for more information.\n> const { accounts, manageaccounts } = require(".");\nThe server is started.\n> const alice = accounts.ALICE;\n> const { parseAddress } = require("@ckb-lumos/helpers");\n> const lockScript = parseAddress(alice.ADDRESS);\n> await manageaccounts.generateLockHash(lockScript);\nThe lock hash is 0xf6ea009a4829de7aeecd75f3ae6bcdbaacf7328074ae52a48456a8793a4b1cca\n')))),(0,o.kt)("h3",{id:"generate-an-account-from-a-private-key"},"Generate an Account from a Private Key"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="hellolumos/src/manageaccounts.ts/generateAccountFromPrivateKey"',title:'"hellolumos/src/manageaccounts.ts/generateAccountFromPrivateKey"'},'import { parseAddress } from "@ckb-lumos/helpers";\nimport { utils, Address, Hash, Script, HexString } from "@ckb-lumos/base";\nconst { computeScriptHash } = utils;\nimport { key } from "@ckb-lumos/hd";\n\nexport type Account = {\n  lockScript: Script;\n  lockHash: Hash;\n  address: Address;\n  pubKey: string;\n};\nexport const generateAccountFromPrivateKey = (privKey: string): Account => {\n  const pubKey = key.privateToPublic(privKey);\n  const args = key.publicKeyToBlake160(pubKey);\n  const template = CONFIG.SCRIPTS["SECP256K1_BLAKE160"]!;\n  const lockScript = {\n    code_hash: template.CODE_HASH,\n    hash_type: template.HASH_TYPE,\n    args: args,\n  };\n  const address = generateAddress(lockScript);\n  const lockHash = computeScriptHash(lockScript);\n  return {\n    lockScript,\n    lockHash,\n    address,\n    pubKey,\n  };\n};\n')),(0,o.kt)("p",null,"Try the ",(0,o.kt)("inlineCode",{parentName:"p"},"generateAccountFromPrivateKey")," function in the Node.js REPL mode: "),(0,o.kt)("details",null,(0,o.kt)("summary",null,"CLICK ME"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell",metastring:"{1,2,5,7,8}","{1,2,5,7,8}":!0},"$ cd hellolumos\n$ node --experimental-repl-await\nWelcome to Node.js v14.0.0.\nType \".help\" for more information.\n> const { accounts, manageaccounts } = require(\".\");\nThe server is started.\n> const alice = accounts.ALICE;\n> await manageaccounts.generateAccountFromPrivateKey(alice.PRIVATE_KEY);\n{\n  lockScript: {\n    code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n    hash_type: 'type',\n    args: '0x7e00660b8ab122bca3ba468c5b6eee71f40b7d8e'\n  },\n  lockHash: '0xf6ea009a4829de7aeecd75f3ae6bcdbaacf7328074ae52a48456a8793a4b1cca',\n  address: 'ckt1qyq8uqrxpw9tzg4u5waydrzmdmh8raqt0k8qmuetsf',\n  pubKey: '0x02963f88be6c4163a68abf0539facdfc2a77064c6091f618953a230caeacf5237e'\n}\n")))))}h.isMDXComponent=!0}}]);