"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3120],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,k=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2031:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>s,metadata:()=>c,toc:()=>u,default:()=>d});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),o=["components"],i={id:"sudtbycapsule",title:"Write an SUDT Script by Capsule"},s=void 0,c={unversionedId:"develop/tools/capsule/sudtbycapsule",id:"develop/tools/capsule/sudtbycapsule",title:"Write an SUDT Script by Capsule",description:"Introduction",source:"@site/docs/develop/tools/capsule/sudtbycapsule.md",sourceDirName:"develop/tools/capsule",slug:"/develop/tools/capsule/sudtbycapsule",permalink:"/docs-new_toolchain/docs/develop/tools/capsule/sudtbycapsule",tags:[],version:"current",frontMatter:{id:"sudtbycapsule",title:"Write an SUDT Script by Capsule"},sidebar:"Develop",previous:{title:"Introduction",permalink:"/docs-new_toolchain/docs/develop/tools/capsule/intro"},next:{title:"Dynamic loading in Capsule",permalink:"/docs-new_toolchain/docs/develop/tools/capsule/capsule-dynamic-loading-tutorial"}},u=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Prepare to write the SUDT script",id:"prepare-to-write-the-sudt-script",children:[{value:"Run a dev chain and ckb-cli",id:"run-a-dev-chain-and-ckb-cli",children:[],level:3},{value:"Install Capsule",id:"install-capsule",children:[],level:3},{value:"Create a project",id:"create-a-project",children:[],level:3},{value:"Build the project",id:"build-the-project",children:[],level:3}],level:2},{value:"Write a SUDT script",id:"write-a-sudt-script",children:[{value:"Check the used libraries",id:"check-the-used-libraries",children:[],level:3},{value:"Load Script",id:"load-script",children:[],level:3},{value:"Check inputs",id:"check-inputs",children:[],level:3},{value:"Load inputs / outputs UDT amount",id:"load-inputs--outputs-udt-amount",children:[],level:3},{value:"Use Iterator to query cells",id:"use-iterator-to-query-cells",children:[],level:3},{value:"Build the project",id:"build-the-project-1",children:[],level:3}],level:2},{value:"Testing",id:"testing",children:[{value:"Check the default tests",id:"check-the-default-tests",children:[],level:3},{value:"Write new tests",id:"write-new-tests",children:[],level:3}],level:2},{value:"Deployment",id:"deployment",children:[{value:"Run a dev chain and ckb-cli",id:"run-a-dev-chain-and-ckb-cli-1",children:[],level:3},{value:"Deploy",id:"deploy",children:[],level:3},{value:"Migration",id:"migration",children:[],level:3}],level:2},{value:"Next Steps",id:"next-steps",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/capsule"},"Capsule")," is a set of tools for Rust developers to develop scripts on CKB which covers the entire lifecycle of script development: writing,debugging,testing and deployment. We aim to improve the development experience of Rust developers."),(0,r.kt)("p",null,"In this tutorial, you will learn how to write a SUDT script using Capsule. SUDT is the abbreviation of Simple User Defined Token which defines a minimal standard that contains what\u2019s absolutely needed for dapp developers to issue custom tokens on Nervos CKB. You can refer to ",(0,r.kt)("a",{parentName:"p",href:"https://talk.nervos.org/t/rfc-simple-udt-draft-spec/4333"},"RFC: Simple UDT Draft Spec")," for more details."),(0,r.kt)("p",null,"We expect that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You are Rust developers and generally familiar with software development, writing code, and running your code."),(0,r.kt)("li",{parentName:"ul"},"You are generally familiar with Nervos CKB and have completed the ",(0,r.kt)("a",{parentName:"li",href:"/docs-new_toolchain/docs/basics/guides/devchain"},"How to use a development blockchain")),(0,r.kt)("li",{parentName:"ul"},"You are open to learning about the bleeding edge of blockchain development")),(0,r.kt)("p",null,"If you run into an issue on this tutorial you can ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/capsule"},"create a new issue")," or contact us on ",(0,r.kt)("a",{parentName:"p",href:"https://talk.nervos.org/"},"Nervos talk")," or ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/n6tx7uC"},"Discord"),". "),(0,r.kt)("p",null,"What you will be doing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Prepare to write the SUDT script "),(0,r.kt)("li",{parentName:"ul"},"Write a SUDT script"),(0,r.kt)("li",{parentName:"ul"},"Testing"),(0,r.kt)("li",{parentName:"ul"},"Deployment ")),(0,r.kt)("h2",{id:"prepare-to-write-the-sudt-script"},"Prepare to write the SUDT script"),(0,r.kt)("h3",{id:"run-a-dev-chain-and-ckb-cli"},"Run a dev chain and ckb-cli"),(0,r.kt)("p",null,"You should be able to run a dev chain and know about how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"ckb-cli")," to send transactions.  If you do not, please refer to this tutorial\uff1a",(0,r.kt)("a",{parentName:"p",href:"/docs-new_toolchain/docs/basics/guides/devchain"},"How to use a development blockchain"),".  Please don't forget to add ",(0,r.kt)("inlineCode",{parentName:"p"},"ckb-cli")," to the  PATH environment variable"),(0,r.kt)("h3",{id:"install-capsule"},"Install Capsule"),(0,r.kt)("p",null,"To use capsule, you need to install Docker. It is recommended to install the latest version of Docker:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Install Docker"))),(0,r.kt)("p",null,"Note: The current user must have permission to manage Docker instances. For more information, see ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user"},"Manage Docker as a non-root user"),"."),(0,r.kt)("p",null,"Now you can proceed to install Capsule. It is recommended to download the binary ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/capsule/releases"},"here"),"."),(0,r.kt)("p",null,"Or you can install Capsule from it's source:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cargo install capsule --git https://github.com/nervosnetwork/capsule.git --tag v0.1.3\n")),(0,r.kt)("p",null,"Then check if it works with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"capsule check\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"(click here to view response)"),"```bash ------------------------------ docker    installed ckb-cli    installed ------------------------------ ```"),(0,r.kt)("h3",{id:"create-a-project"},"Create a project"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"capsule new my-sudt\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"(click here to view response)"),'```bash New project "my-sudt" Created file "capsule.toml" Created file "deployment.toml" Created file "README.md" Created file "Cargo.toml" Created "/PATH/my-sudt" Created binary (application) `my-sudt` package Created contract "my-sudt" Created tests Created binary (application) `tests` package Done ```'),(0,r.kt)("p",null,"You can check the project\u2019s layout\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ls my-sudt\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"(click here to view response)"),"```bash",(0,r.kt)("p",null,"build  capsule.toml  Cargo.toml  contracts  deployment.toml  migrations  README.md  tests"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"</details>\n\nThe default contract is under `my-sudt/contracts/my-sudt` directory which is a normal cargo project:\n\n")),(0,r.kt)("p",null,"ls my-sudt/contracts/my-sudt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<details>\n<summary>(click here to view response)</summary>\n```bash\n\nCargo.toml  src\n"))),(0,r.kt)("p",null,"You can open ",(0,r.kt)("inlineCode",{parentName:"p"},"my-sudt/contracts/my-sudt/src/main.rs")," to see some pre-generated code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#![no_std]\n#![no_main]\n#![feature(lang_items)]\n#![feature(alloc_error_handler)]\n#![feature(panic_info_message)]\n\n// Import from `core` instead of from `std` since we are in no-std mode\nuse core::result::Result;\n\n// Import heap related library from `alloc`\n// https://doc.rust-lang.org/alloc/index.html\nuse alloc::{vec, vec::Vec};\n\n// Import CKB syscalls and structures\n// https://nervosnetwork.github.io/ckb-std/riscv64imac-unknown-none-elf/doc/ckb_std/index.html\nuse ckb_std::{\n    entry,\n    default_alloc,\n    debug,\n    high_level::{load_script, load_tx_hash},\n    error::SysError,\n    ckb_types::{bytes::Bytes, prelude::*},\n};\n\nentry!(entry);\ndefault_alloc!();\n\n/// Program entry\nfn entry() -> i8 {\n    // Call main function and return error code\n    match main() {\n        Ok(_) => 0,\n        Err(err) => err as i8,\n    }\n}\n\n/// Error\n#[repr(i8)]\nenum Error {\n    IndexOutOfBound = 1,\n    ItemMissing,\n    LengthNotEnough,\n    Encoding,\n    // Add customized errors here...\n}\n\nimpl From<SysError> for Error {\n    fn from(err: SysError) -> Self {\n        use SysError::*;\n        match err {\n            IndexOutOfBound => Self::IndexOutOfBound,\n            ItemMissing => Self::ItemMissing,\n            LengthNotEnough(_) => Self::LengthNotEnough,\n            Encoding => Self::Encoding,\n            Unknown(err_code) => panic!("unexpected sys error {}", err_code),\n        }\n    }\n}\n\nfn main() -> Result<(), Error> {\n    // remove below examples and write your code here\n\n    let script = load_script()?;\n    let args: Bytes = script.args().unpack();\n    debug!("script args is {:?}", args);\n\n    let tx_hash = load_tx_hash()?;\n    debug!("tx hash is {:?}", tx_hash);\n\n    let _buf: Vec<_> = vec![0u8; 32];\n\n    Ok(())\n}\n')),(0,r.kt)("h3",{id:"build-the-project"},"Build the project"),(0,r.kt)("p",null,"Enter into the project  ",(0,r.kt)("inlineCode",{parentName:"p"},"my-sudt")," and build it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd my-sudt\ncapsule build\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"(click here to view response)"),"```bash",(0,r.kt)("p",null,"Building contract my-sudt\nUpdating crates.io index\nCompiling cc v1.0.56\nCompiling cfg-if v0.1.10\nCompiling buddy-alloc v0.3.0\nCompiling molecule v0.6.0\nCompiling ckb-allocator v0.1.1\nCompiling ckb-standalone-types v0.0.1-pre.1\nCompiling ckb-std v0.4.1\nCompiling my-sudt v0.1.0 (/code/contracts/my-sudt)\nFinished dev ","[unoptimized + debuginfo]"," target(s) in 8.73s\nDone"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"</details>\n\n\nYou will find a new generated contract binary in the `build/debug` directory:\n\n")),(0,r.kt)("p",null,"ls build/debug"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<details>\n<summary>(click here to view response)</summary>\n```bash\n\nmy-sudt\n"))),(0,r.kt)("p",null,"You're all done? Great, let's get coding."),(0,r.kt)("h2",{id:"write-a-sudt-script"},"Write a SUDT script"),(0,r.kt)("p",null,"SUDT scripts can be in ",(0,r.kt)("strong",{parentName:"p"},"owner mode")," and ",(0,r.kt)("strong",{parentName:"p"},"normal mode")," which include different verification rules, we should deal with that when we're coding."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"owner mode"),"\uff1aIf one of the transaction input has a lock script matching the SUDT script argument, the SUDT script will be in owner mode. We don\u2019t need to perform checks, the owner can perform any operations such as issuing more SUDTs or burning SUDTs. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"normal mode\uff1a"),"Otherwise, the SUDT script will be in normal mode. We need to ensure the sum of all inputs\u2019 capacity is not smaller than the sum of all outputs capacity. Please note that only one type of SUDT can be issued for each unique lock script. ")),(0,r.kt)("p",null,"The script is consisted of four parts\uff1aload script\u3001check inputs\u3001load inputs / outputs UDT amount\u3001error handling. We should check the used libraries before coding."),(0,r.kt)("h3",{id:"check-the-used-libraries"},"Check the used libraries"),(0,r.kt)("p",null,"Open ",(0,r.kt)("inlineCode",{parentName:"p"},"contracts/my-sudt/Cargo.toml"),", we already have a dependency:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[dependencies]\nckb-std = "0.4.1"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ckb-std")," is a crate used to handling CKB syscalls."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ckb-standalone-types")," is a crate which re-exported as the ",(0,r.kt)("inlineCode",{parentName:"li"},"ckb_std::ckb_types")," provides the definition of CKB structures.")),(0,r.kt)("p",null,"You may refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/capsule/wiki/Rust-libraries"},"Rust libraries")," for more useful crates. We can only use crates which supports ",(0,r.kt)("inlineCode",{parentName:"p"},"no-std")," in scripts."),(0,r.kt)("h3",{id:"load-script"},"Load Script"),(0,r.kt)("p",null,"At the beginning of the script, we need to check the SUDT\u2019s mode, if it is owner mode, we simply skip the verification code and return ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", which represents the verification is successful, otherwise we check the amount of UDT."),(0,r.kt)("p",null,"To achieve this, we need to load ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," of the current script, which the generated code already did for us. So we just remove the unused lines from the ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function."),(0,r.kt)("p",null,"In the code below, we load the current script(SUDT)'s args field, and invoke ",(0,r.kt)("inlineCode",{parentName:"p"},"check_owner_mode")," which we have not defined yet."),(0,r.kt)("p",null,"Notice since we are using no-std Rust, we can't directly use the ",(0,r.kt)("inlineCode",{parentName:"p"},"std")," in the code. Instead, we need to import the ",(0,r.kt)("inlineCode",{parentName:"p"},"Vec")," struct from the ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/stable/alloc/index.html"},"alloc")," crate, which is a rust builtin crate contains heap related structs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn main() -> Result<(), Error> {\n    // load current script\n    // check verification branch is owner mode or normal mode\n    let script = load_script()?;\n    let args: Bytes = script.args().unpack();\n\n    // unpack the Script#args field\n    let args: Vec<u8> = script.args().unpack();\n\n    // return success if owner mode is true\n    if check_owner_mode(&args)? {\n        return Ok(());\n    }\n\n    // more verifications ...\n    return Ok(());\n}\n")),(0,r.kt)("h3",{id:"check-inputs"},"Check inputs"),(0,r.kt)("p",null,"Now we should  check the owner mode status by defining the ",(0,r.kt)("inlineCode",{parentName:"p"},"check_owner_mode")," function\uff1a"),(0,r.kt)("p",null,"We need to load every input's lock hash and compare it to the script's args. If we find an input's lock hash corresponds to the script's args, we are in owner mode; otherwise, we iterate all the inputs and finally got an ",(0,r.kt)("inlineCode",{parentName:"p"},"IndexOutOfBound")," error, which means we are in normal mode."),(0,r.kt)("p",null,"We use ",(0,r.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/ckb-std/riscv64imac-unknown-none-elf/doc/ckb_std/high_level/fn.load_cell_lock_hash.html"},"load_cell_lock_hash")," to load cell's lock hash from CKB. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Source::Input")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"i")," args denote we load ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"i-th")," inputs."),(0,r.kt)("p",null,"The error ",(0,r.kt)("inlineCode",{parentName:"p"},"SysError::IndexOutOfBound")," represents that we request an index that does not exist, which means we cannot find a matched input cell, so we return ",(0,r.kt)("inlineCode",{parentName:"p"},"Ok(false)"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use ckb_std::{\n    high_level::{load_cell_lock_hash},\n    ckb_constants::Source,\n};\n\nfn check_owner_mode(args: &Bytes) -> Result<bool, Error> {\n    // With owner lock script extracted, we will look through each input in the\n    // current transaction to see if any unlocked cell uses owner lock.\n    for i in 0.. {\n        // check input's lock_hash with script args\n        let lock_hash = match load_cell_lock_hash(\n            i,\n            Source::Input,\n        ) {\n            Ok(lock_hash) => lock_hash,\n            Err(SysError::IndexOutOfBound) => return Ok(false),\n            Err(err) => return Err(err.into()),\n        };\n        // invalid length of loaded data\n        if args[..] == lock_hash[..] {\n           return Ok(true);\n        }\n    }\n    Ok(false)\n}\n")),(0,r.kt)("h3",{id:"load-inputs--outputs-udt-amount"},"Load inputs / outputs UDT amount"),(0,r.kt)("p",null,"If the owner mode is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", we should continue the verification: check the total input SUDT amount is greater than or equals to the total output SUDT amount."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Define two methods:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"collect_inputs_amount")," \uff1acollect total input SUDT amount"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"collect_outputs_amount")," \uff1acollect total output SUDT amount."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Since we aim to read all SUDT inputs which type is the current script(SUDT), we  can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Source::GroupInput")," instead of  ",(0,r.kt)("inlineCode",{parentName:"p"},"Source::Input"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"Source::GroupInput")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"i"),"   means load the ",(0,r.kt)("inlineCode",{parentName:"p"},"i-th"),' input from the "input group". '))),(0,r.kt)("p",null,"Tips\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"By using ",(0,r.kt)("inlineCode",{parentName:"li"},"Source::GroupInput"),"  in the syscall, CKB verification engine will automatically group the inputs/outputs by ",(0,r.kt)("inlineCode",{parentName:"li"},"lock")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"type")," script."),(0,r.kt)("li",{parentName:"ul"},"The data type of SUDT is  ",(0,r.kt)("inlineCode",{parentName:"li"},"u128"),", which is 16 bytes so we use the 16 bytes buffer."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"i-th")," input of ",(0,r.kt)("inlineCode",{parentName:"li"},"Source::Input"),"(index of all inputs) may be or may not be the same cell of the ",(0,r.kt)("inlineCode",{parentName:"li"},"i-th")," input of ",(0,r.kt)("inlineCode",{parentName:"li"},"Source::GroupInput")," (index of inputs which lock/type is the current script).")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"const UDT_LEN: usize = 16;\n\nfn collect_inputs_amount() -> Result<u128, Error> {\n    // let's loop through all input cells containing current UDTs,\n    // and gather the sum of all input tokens.\n    let mut inputs_amount: u128 = 0;\n    let mut buf = [0u8; UDT_LEN];\n\n    // u128 is 16 bytes\n    for i in 0.. {\n        let data = match load_cell_data(i, Source::GroupInput) {\n            Ok(data) => data,\n            Err(SysError::IndexOutOfBound) => break,\n            Err(err) => return Err(err.into()),\n        };\n\n        if data.len() != UDT_LEN {\n            return Err(Error::Encoding);\n        }\n        buf.copy_from_slice(&data);\n        inputs_amount += u128::from_le_bytes(buf);\n    }\n    Ok(inputs_amount)\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"collect_outputs_amount")," function is similar, except we load data from outputs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn collect_outputs_amount() -> Result<u128, Error> {\n    // With the sum of all input UDT tokens gathered, let's now iterate through\n    // output cells to grab the sum of all output UDT tokens.\n    let mut outputs_amount: u128 = 0;\n    let mut i = 0;\n\n    // u128 is 16 bytes\n    let mut buf = [0u8; UDT_LEN];\n    for i in 0.. {\n        let data = match load_cell_data(i, Source::GroupOutput) {\n            Ok(data) => data,\n            Err(SysError::IndexOutOfBound) => break,\n            Err(err) => return Err(err.into()),\n        };\n\n        if data.len() != UDT_LEN {\n            return Err(Error::Encoding);\n        }\n        buf.copy_from_slice(&data);\n        outputs_amount += u128::from_le_bytes(buf);\n    }\n    Ok(outputs_amount)\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update the ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," function to check inputs / outputs UDT amount:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Error\n#[repr(i8)]\nenum Error {\n    IndexOutOfBound = 1,\n    ItemMissing,\n    LengthNotEnough,\n    Encoding,\n    Amount\n}\n\nfn main() -> Result<(), Error> {\n    let script = load_script()?;\n    let args: Bytes = script.args().unpack();\n\n    // return success if owner mode is true\n    if check_owner_mode(&args)? {\n        return Ok(());\n    }\n\n    let inputs_amount = collect_inputs_amount()?;\n    let outputs_amount = collect_outputs_amount()?;\n\n    if inputs_amount < outputs_amount {\n        return Err(Error::Amount);\n    }\n\n    Ok(())\n}\n")),(0,r.kt)("h3",{id:"use-iterator-to-query-cells"},"Use Iterator to query cells"),(0,r.kt)("p",null,"In the previous code, we use ",(0,r.kt)("inlineCode",{parentName:"p"},"for")," loop to iterate inputs and outputs, since iteration over cells is a common pattern in CKB programming, ",(0,r.kt)("inlineCode",{parentName:"p"},"ckb-std")," provides a high-level interface ",(0,r.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/ckb-std/riscv64imac-unknown-none-elf/doc/ckb_std/high_level/struct.QueryIter.html"},"QueryIter")," to handle it."),(0,r.kt)("p",null,"QueryIter needs two args, the first is a loading function, the seconds is ",(0,r.kt)("inlineCode",{parentName:"p"},"Source"),". This is an example to load all grouped inputs cells data ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryIter::new(load_cell_data, Source::GroupInput)"),"."),(0,r.kt)("p",null,"Rewrite our functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn check_owner_mode(args: &Bytes) -> Result<bool, Error> {\n    // With owner lock script extracted, we will look through each input in the\n    // current transaction to see if any unlocked cell uses owner lock.\n    let is_owner_mode = QueryIter::new(load_cell_lock_hash, Source::Input)\n        .find(|lock_hash| args[..] == lock_hash[..]).is_some();\n    Ok(is_owner_mode)\n}\n\nfn collect_inputs_amount() -> Result<u128, Error> {\n    // let's loop through all input cells containing current UDTs,\n    // and gather the sum of all input tokens.\n    let mut buf = [0u8; UDT_LEN];\n\n    let udt_list = QueryIter::new(load_cell_data, Source::GroupInput)\n        .map(|data|{\n            if data.len() == UDT_LEN {\n                buf.copy_from_slice(&data);\n                // u128 is 16 bytes\n                Ok(u128::from_le_bytes(buf))\n            } else {\n                Err(Error::Encoding)\n            }\n        }).collect::<Result<Vec<_>, Error>>()?;\n    Ok(udt_list.into_iter().sum::<u128>())\n}\n\nfn collect_outputs_amount() -> Result<u128, Error> {\n    // With the sum of all input UDT tokens gathered, let's now iterate through\n    // output cells to grab the sum of all output UDT tokens.\n    let mut buf = [0u8; UDT_LEN];\n\n    let udt_list = QueryIter::new(load_cell_data, Source::GroupOutput)\n        .map(|data|{\n            if data.len() == UDT_LEN {\n                buf.copy_from_slice(&data);\n                // u128 is 16 bytes\n                Ok(u128::from_le_bytes(buf))\n            } else {\n                Err(Error::Encoding)\n            }\n        }).collect::<Result<Vec<_>, Error>>()?;\n    Ok(udt_list.into_iter().sum::<u128>())\n}\n\n")),(0,r.kt)("p",null,"Now we have finished the SUDT script, you may refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jjyr/my-sudt/blob/master/contracts/my-sudt/src/main.rs"},"Full code of my-sudt")," to check the full script code. If you are interested, you may also check ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-miscellaneous-scripts/blob/master/c/simple_udt.c"},"the SUDT script written in C"),"."),(0,r.kt)("h3",{id:"build-the-project-1"},"Build the project"),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"capsule build")," under the project directory to build the script.If no error occurred, we can find the script binary at ",(0,r.kt)("inlineCode",{parentName:"p"},"my-usdt/build/debug/my-sudt"),". "),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("p",null,"We will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ckb-testtool")," crate to construct transactions and context for our testing."),(0,r.kt)("h3",{id:"check-the-default-tests"},"Check the default tests"),(0,r.kt)("p",null,"When create the project ",(0,r.kt)("inlineCode",{parentName:"p"},"my-sudt"),",",(0,r.kt)("inlineCode",{parentName:"p"},"capsule"),"  have generated the default tests.The default tests create mock cells and unlock them for testing."),(0,r.kt)("p",null,"Use  ",(0,r.kt)("inlineCode",{parentName:"p"},"capsule build")," under the project directory to build the script,\nthen use ",(0,r.kt)("inlineCode",{parentName:"p"},"capsule test")," to run the default tests.We will find the error message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"failures:\n\n---- tests::test_basic stdout ----\nthread 'tests::test_basic' panicked at 'pass verification: Error { kind: ValidationFailure(4)Script }', tests/src/tests.rs:52:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::test_basic\n")),(0,r.kt)("p",null,"The error number ",(0,r.kt)("inlineCode",{parentName:"p"},"4")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"Error { kind: ValidationFailure(4)"),"  refers to ",(0,r.kt)("inlineCode",{parentName:"p"},"Error::Encoding"),", which means the cell\u2019s data type is not ",(0,r.kt)("inlineCode",{parentName:"p"},"u128"),". "),(0,r.kt)("p",null,"Let\u2019s check the default tests code  ",(0,r.kt)("inlineCode",{parentName:"p"},"tests/src/tests.rs"),"  to find out how to write the tests, then we can write new tests adapted ",(0,r.kt)("inlineCode",{parentName:"p"},"my-sudt"),"\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In the beginning part, initialize the  ",(0,r.kt)("inlineCode",{parentName:"li"},"Context")," which is a structure to simulate the chain environment. We can use ",(0,r.kt)("inlineCode",{parentName:"li"},"Context")," to deploy exists cells and mock block headers.",(0,r.kt)("inlineCode",{parentName:"li"},"deploy_contract")," will return the  ",(0,r.kt)("inlineCode",{parentName:"li"},"out_point")," of the script.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// deploy contract\n    let mut context = Context::default();\n    let contract_bin: Bytes = Loader::default().load_binary("my-sudt");\n    let contract_out_point = context.deploy_contract(contract_bin);\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Then ",(0,r.kt)("inlineCode",{parentName:"li"},"build_script")," is called with the script's ",(0,r.kt)("inlineCode",{parentName:"li"},"out_point")," , this function returns the ",(0,r.kt)("inlineCode",{parentName:"li"},"Script")," which uses our script as the code. ",(0,r.kt)("inlineCode",{parentName:"li"},"create_cell")," creates an existing cell in the context, which uses our script as the ",(0,r.kt)("inlineCode",{parentName:"li"},"lock_script"),".")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Please note the default tests assume the script is a lock_script, but in our case, ",(0,r.kt)("inlineCode",{parentName:"em"},"my-sudt")," is a type_script. We'll fix it later.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// prepare scripts\n    let lock_script = context.build_script(&contract_out_point, Default::default()).expect("script");\n    let lock_script_dep = CellDep::new_builder().out_point(contract_out_point).build();\n\n    // prepare cells\n    let input_out_point = context.create_cell(\n        CellOutput::new_builder()\n            .capacity(1000u64.pack())\n            .lock(lock_script.clone())\n            .build(),\n        Bytes::new(),\n    );\n    let input = CellInput::new_builder()\n        .previous_output(input_out_point)\n        .build();\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"After that, build two outputs cells and a transaction structure.It is necessary to include  ",(0,r.kt)("inlineCode",{parentName:"li"},"cell_deps")," field in the transaction which should contain all the referenced scripts, in this case, we can only refer to ",(0,r.kt)("inlineCode",{parentName:"li"},"my-sudt"),".  ",(0,r.kt)("inlineCode",{parentName:"li"},"complete_tx"),"  also implement ",(0,r.kt)("inlineCode",{parentName:"li"},"cell_deps"),", while the field is already completed manually, this line is not necessary.")),(0,r.kt)("p",null,"Please note that the  transaction's ",(0,r.kt)("inlineCode",{parentName:"p"},"outputs_data")," must have the same length with the ",(0,r.kt)("inlineCode",{parentName:"p"},"outputs"),", even the data is empty."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let outputs = vec![\n        CellOutput::new_builder()\n            .capacity(500u64.pack())\n            .lock(lock_script.clone())\n            .build(),\n        CellOutput::new_builder()\n            .capacity(500u64.pack())\n            .lock(lock_script)\n            .build(),\n    ];\n\n    let outputs_data = vec![Bytes::new(); 2];\n\n    // build transaction\n    let tx = TransactionBuilder::default()\n        .input(input)\n        .outputs(outputs)\n        .outputs_data(outputs_data.pack())\n        .cell_dep(lock_script_dep)\n        .build();\n    let tx = context.complete_tx(tx);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Finally, verify the transaction:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// run\n    context\n        .verify_tx(&tx, MAX_CYCLES)\n        .expect("pass verification");\n')),(0,r.kt)("h3",{id:"write-new-tests"},"Write new tests"),(0,r.kt)("p",null,"We should create mock SUDT cells and spend them for testing SUDT verification.\nAs ",(0,r.kt)("inlineCode",{parentName:"p"},"my-sudt")," script is a ",(0,r.kt)("inlineCode",{parentName:"p"},"type_script")," we need another script as ",(0,r.kt)("inlineCode",{parentName:"p"},"lock_script")," for mock cells, it is recommended to use ",(0,r.kt)("inlineCode",{parentName:"p"},"always success")," script returned ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"always success")," is built-in in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ckb-testtool"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use ckb_testtool::{builtin::ALWAYS_SUCCESS, context::Context};\n\n    // deploy always_success script\n    let always_success_out_point = context.deploy_contract(ALWAYS_SUCCESS.clone());\n")),(0,r.kt)("p",null,"Before writing the code, let's think about our  test cases:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Return success when input tokens equals to output tokens."),(0,r.kt)("li",{parentName:"ol"},"Return success when input tokens is greater than output tokens."),(0,r.kt)("li",{parentName:"ol"},"Return failure when input tokens is less than output tokens."),(0,r.kt)("li",{parentName:"ol"},"Return success when input tokens is less than output tokens with ",(0,r.kt)("inlineCode",{parentName:"li"},"owner mode")," activated.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Define ",(0,r.kt)("inlineCode",{parentName:"p"},"build_test_context")," to build transactions. There are three args: "),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The data type of  ",(0,r.kt)("inlineCode",{parentName:"li"},"inputs_token")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"outputs_token"),"  is  ",(0,r.kt)("inlineCode",{parentName:"li"},"u128"),". The function can generate SUDT inputs cells and outputs cells according to the two args."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is_owner_mode")," refers to the current transaction is in SUDT owner mode or normal mode."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Deploy the SUDT and ",(0,r.kt)("inlineCode",{parentName:"p"},"always-success")," scripts."))),(0,r.kt)("p",null,"Please note that if ",(0,r.kt)("inlineCode",{parentName:"p"},"is_owner_mode")," is true, we will set ",(0,r.kt)("inlineCode",{parentName:"p"},"lock_script"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"lock_hash")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"owner script hash"),"; otherwise, we will set ",(0,r.kt)("inlineCode",{parentName:"p"},"[0u8; 32]")," which implies can't enter into owner mode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'fn build_test_context(\n    inputs_token: Vec<u128>,\n    outputs_token: Vec<u128>,\n    is_owner_mode: bool,\n) -> (Context, TransactionView) {\n    // deploy my-sudt script\n    let mut context = Context::default();\n    let sudt_bin: Bytes = Loader::default().load_binary("my-sudt");\n    let sudt_out_point = context.deploy_contract(sudt_bin);\n    // deploy always_success script\n    let always_success_out_point = context.deploy_contract(ALWAYS_SUCCESS.clone());\n\n    // build lock script\n    let lock_script = context\n        .build_script(&always_success_out_point, Default::default())\n        .expect("script");\n    let lock_script_dep = CellDep::new_builder()\n        .out_point(always_success_out_point)\n        .build();\n\n    // build sudt script\n    let sudt_script_args: Bytes = if is_owner_mode {\n        // use always_success script hash as owner\'s lock\n        let lock_hash: [u8; 32] = lock_script.calc_script_hash().unpack();\n        lock_hash.to_vec().into()\n    } else {\n        // use zero hash as owner\'s lock which implies we can never enter owner mode\n        [0u8; 32].to_vec().into()\n    };\n\n    let sudt_script = context\n        .build_script(&sudt_out_point, sudt_script_args)\n        .expect("script");\n    let sudt_script_dep = CellDep::new_builder().out_point(sudt_out_point).build();\n\n    //... more code below\n//}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Build inputs and outputs according to the ",(0,r.kt)("inlineCode",{parentName:"li"},"inputs_token")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"outputs_token")," ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// ...\n    // prepare inputs\n    // assign 1000 Bytes to per input\n    let input_ckb = Capacity::bytes(1000).unwrap().as_u64();\n    let inputs = inputs_token.iter().map(|token| {\n        let input_out_point = context.create_cell(\n            CellOutput::new_builder()\n                .capacity(input_ckb.pack())\n                .lock(lock_script.clone())\n                .type_(Some(sudt_script.clone()).pack())\n                .build(),\n            token.to_le_bytes().to_vec().into(),\n        );\n        let input = CellInput::new_builder()\n            .previous_output(input_out_point)\n            .build();\n        input\n    });\n\n    // prepare outputs\n    let output_ckb = input_ckb * inputs_token.len() as u64 / outputs_token.len() as u64;\n    let outputs = outputs_token.iter().map(|_token| {\n        CellOutput::new_builder()\n            .capacity(output_ckb.pack())\n            .lock(lock_script.clone())\n            .type_(Some(sudt_script.clone()).pack())\n            .build()\n    });\n    let outputs_data: Vec<_> = outputs_token\n        .iter()\n        .map(|token| Bytes::from(token.to_le_bytes().to_vec()))\n        .collect();\n    // ...\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Finally construct the transaction and return it with context.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// build transaction\n    let tx = TransactionBuilder::default()\n        .inputs(inputs)\n        .outputs(outputs)\n        .outputs_data(outputs_data.pack())\n        .cell_dep(lock_script_dep)\n        .cell_dep(sudt_script_dep)\n        .build();\n    (context, tx)\n")),(0,r.kt)("p",null,"Now the helper function ",(0,r.kt)("inlineCode",{parentName:"p"},"build_test_context")," is finished, we can write our tests: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[test]\nfn test_basic() {\n    let (mut context, tx) = build_test_context(vec![1000], vec![400, 600], false);\n    let tx = context.complete_tx(tx);\n\n    // run\n    context\n        .verify_tx(&tx, MAX_CYCLES)\n        .expect("pass verification");\n}\n\n#[test]\nfn test_destroy_udt() {\n    let (mut context, tx) = build_test_context(vec![1000], vec![800, 100, 50], false);\n    let tx = context.complete_tx(tx);\n\n    // run\n    context\n        .verify_tx(&tx, MAX_CYCLES)\n        .expect("pass verification");\n}\n\n#[test]\nfn test_create_sudt_without_owner_mode() {\n    let (mut context, tx) = build_test_context(vec![1000], vec![1200], false);\n    let tx = context.complete_tx(tx);\n\n    // run\n    let err = context.verify_tx(&tx, MAX_CYCLES).unwrap_err();\n    assert_error_eq!(err, ScriptError::ValidationFailure(ERROR_AMOUNT));\n}\n\n#[test]\nfn test_create_sudt_with_owner_mode() {\n    let (mut context, tx) = build_test_context(vec![1000], vec![1200], true);\n    let tx = context.complete_tx(tx);\n\n    // run\n    context\n        .verify_tx(&tx, MAX_CYCLES)\n        .expect("pass verification");\n}\n')),(0,r.kt)("p",null,"You may refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jjyr/my-sudt/blob/master/tests/src/tests.rs"},"my-sudt tests")," for the full tests. Run ",(0,r.kt)("inlineCode",{parentName:"p"},"capsule test"),"  all tests will be passed."),(0,r.kt)("h2",{id:"deployment"},"Deployment"),(0,r.kt)("h3",{id:"run-a-dev-chain-and-ckb-cli-1"},"Run a dev chain and ckb-cli"),(0,r.kt)("p",null,"You should be running a dev chain and know about how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"ckb-cli")," to send transactions before deployment. "),(0,r.kt)("h3",{id:"deploy"},"Deploy"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Update the deployment configurations"),(0,r.kt)("p",{parentName:"li"},"Open  ",(0,r.kt)("inlineCode",{parentName:"p"},"deployment.toml")," :"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"cells"),"  describes which cells to be deployed."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name"),": Define the reference name used in the deployment configuration."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enable_type_id")," : If it is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," means create a ",(0,r.kt)("inlineCode",{parentName:"li"},"type_id")," for the cell."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"location")," :  Define the script binary path."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"dep_groups"),"  describes which dep_groups to be created. Dep Group is a cell which bundles several cells as its members. When a dep group cell is used in ",(0,r.kt)("inlineCode",{parentName:"p"},"cell_deps"),", it has the same effect as adding all its members into ",(0,r.kt)("inlineCode",{parentName:"p"},"cell_deps"),". In our case, we don\u2019t need ",(0,r.kt)("inlineCode",{parentName:"p"},"dep_groups"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"lock"),"  describes the ",(0,r.kt)("inlineCode",{parentName:"p"},"lock")," field of the new deployed cells.It is  recommended to set ",(0,r.kt)("inlineCode",{parentName:"p"},"lock")," to the deployer's address(an address that you can unlock) in the dev chain and in the testnet, which is easier to update the script.")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Uncomment the configuration file and replace the cell name and location with ",(0,r.kt)("inlineCode",{parentName:"p"},"my-usdt"),"."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'# [[cells]]\n# name = "my_cell"\n# enable_type_id = false\n# location = { file = "build/release/my_cell" }\n\n# # Dep group cells\n# [[dep_groups]]\n# name = "my_dep_group"\n# cells = [\n#   "my_cell",\n#   "secp256k1_data"\n# ]\n\n# # Replace with your own lock if you want to unlock deployed cells.\n# # The deployment code_hash is secp256k1 lock\n# [lock]\n# code_hash = "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8"\n# args = "0x0000000000000000000000000000000000000000"\n# hash_type = "type"\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Build release version of the script")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The release version of script  doesn\u2019t  include debug symbols which makes the size smaller.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"capsule build --release\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Deploy the script ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"capsule deploy --address <ckt1....>\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"ckb-cli")," has been installed and dev-chain RPC is connectable, you will see the ",(0,r.kt)("inlineCode",{parentName:"p"},"deployment plan"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"new_occupied_capacity")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"total_occupied_capacity"),"  refer how much CKB to store cells and data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"txs_fee_capacity")," refers how much CKB to pay the transaction fee.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Deployment plan:\n---\nmigrated_capacity: 0.0 (CKB)\nnew_occupied_capacity: 33629.0 (CKB)\ntxs_fee_capacity: 0.0001 (CKB)\ntotal_occupied_capacity: 33629.0 (CKB)\nrecipe:\n  cells:\n    - name: my-sudt\n      index: 0\n      tx_hash: 0x8b496cb19018c475cdc4605ee9cef83cbfe578dce4f81f3367395906eba52c29\n      occupied_capacity: 33629.0 (CKB)\n      data_hash: 0xaa3d472025e6afefdf3f65c5f9beefd206b4283b30551baef83cbb4762e6d397\n      type_id: ~\n  dep_groups: []\nConfirm deployment? (Yes/No)\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Type ",(0,r.kt)("inlineCode",{parentName:"li"},"yes")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"y"),"  and input the password to unlock the account.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"send cell_tx 8b496cb19018c475cdc4605ee9cef83cbfe578dce4f81f3367395906eba52c29\nDeployment complete\n")),(0,r.kt)("p",null,"Now the SUDT script has been deployed, you can refer to this script by using ",(0,r.kt)("inlineCode",{parentName:"p"},"tx_hash: 0xaa3d472025e6afefdf3f65c5f9beefd206b4283b30551baef83cbb4762e6d397 index: 0")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"out_point"),"(your ",(0,r.kt)("inlineCode",{parentName:"p"},"tx_hash")," should be another value)."),(0,r.kt)("h3",{id:"migration"},"Migration"),(0,r.kt)("p",null,"If you want to update the script code and deploy again, you can simply run this command again:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"capsule deploy --address ckt1qyq075y5ctzlgahu8pgsqxrqnglajgwa9zksmqdupd\n")),(0,r.kt)("p",null,"The new script will be automatically migrated which means destroy the old script cells and create new cells.\nYou will find  ",(0,r.kt)("inlineCode",{parentName:"p"},"new_occupied_capacity")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," because ",(0,r.kt)("inlineCode",{parentName:"p"},"capacity")," is already covered by the old script cells.Please don\u2019t forget the transaction fee you still need to pay it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Deployment plan:\n---\nmigrated_capacity: 33629.0 (CKB)\nnew_occupied_capacity: 0.0 (CKB)\ntxs_fee_capacity: 0.0001 (CKB)\ntotal_occupied_capacity: 33629.0 (CKB)\nrecipe:\n  cells:\n    - name: my-sudt\n      index: 0\n      tx_hash: 0x10d508a0b44d3c1e02982f85a3e9b5d23d3961fddbf554d20abb4bf54f61950a\n      occupied_capacity: 33629.0 (CKB)\n      data_hash: 0xaa3d472025e6afefdf3f65c5f9beefd206b4283b30551baef83cbb4762e6d397\n      type_id: ~\n  dep_groups: []\nConfirm deployment? (Yes/No)\n")),(0,r.kt)("h2",{id:"next-steps"},"Next Steps"),(0,r.kt)("p",null,"This is the end of our journey into writing a SUDT script by Capsule. We have launched the ",(0,r.kt)("a",{parentName:"p",href:"https://www.nervos.org/grants/"},"Nervos Grants Program")," and ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/nervosnetwork/introducing-cklabs-the-nervos-incubator-3e5a2c443c7c"},"CKLabs")," to empower innovation and development and support the growth of a diverse and thriving ecosystem. We can't wait to see what you build next!"))}d.isMDXComponent=!0}}]);